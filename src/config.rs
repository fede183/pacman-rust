use bevy::{math::Vec3, prelude::LinearRgba};

pub const SQUARE_SIZE: f32 = 90.;

const WINDOW_HEIGHT: f32 = 30.;
const WINDOW_WIGTH: f32 = 30.;

pub const DISPLAY_WINDOW_HEIGHT: f32 = SQUARE_SIZE*WINDOW_HEIGHT;
pub const DISPLAY_WINDOW_WIGTH: f32 = SQUARE_SIZE*WINDOW_WIGTH;

const GAME_OVER_WINDOW_HEIGHT: f32 = 7.5;
const GAME_OVER_WINDOW_WIGTH: f32 = 10.;

pub const DISPLAY_GAME_OVER_WINDOW_HEIGHT: f32 = SQUARE_SIZE*GAME_OVER_WINDOW_HEIGHT;
pub const DISPLAY_GAME_OVER_WINDOW_WIGTH: f32 = SQUARE_SIZE*GAME_OVER_WINDOW_WIGTH;

pub const HEADER_HEIGHT: f32 = SQUARE_SIZE;
pub const HEADER_WIGTH: f32 = SQUARE_SIZE * 9.;
pub const HEADER_BORDER_SIZE: f32 = 10.;
pub const HEADER_POSITIONS: Vec3 = Vec3::new(0., DISPLAY_SCORE_POSITION_Y, 2.);

pub const SCORE_FONT_SIZE: f32 = 20.;

pub const DISPLAY_SCORE_POSITION_X: f32 = - (SQUARE_SIZE * 3.);
pub const DISPLAY_SCORE_POSITION_Y: f32 = SQUARE_SIZE * 5.;
pub const DISPLAY_CLOCK_POSITION_X: f32 = SQUARE_SIZE * 3.;
pub const DISPLAY_CLOCK_POSITION_Y: f32 = DISPLAY_SCORE_POSITION_Y;

pub const LIMIT_HEIGHT: f32 = SQUARE_SIZE * 9.;
pub const LIMIT_WIGTH: f32 = SQUARE_SIZE * 9.;
pub const LIMIT_POSITIONS: Vec3 = Vec3::new(0., -SQUARE_SIZE, 2.);

pub const BORDER_SIZE: f32 = 20.;

pub const BOARD_COLOR: LinearRgba = LinearRgba::BLACK;
pub const SCORE_COLOR: LinearRgba = LinearRgba::WHITE;
pub const BORDER_COLOR: LinearRgba = LinearRgba::new(150., 150., 150., 255.);
pub const HEADER_FILL_COLOR: LinearRgba = LinearRgba::BLACK;
pub const HEADER_BORDER_COLOR: LinearRgba = LinearRgba::WHITE;
